plugins {
    id 'application'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.7.3'
    id 'net.researchgate.release' version '2.4.0'
    id "io.sdkman.vendors" version "1.1.1"
}

repositories {
    jcenter()
    maven { url "http://dl.bintray.com/kdabir/maven" }
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

sourceSets {
    main.groovy.srcDirs = ['src']
    test.groovy.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs =  main.java.srcDirs = test.java.srcDirs = []
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:$groovyVersion",
            'org.apache.ant:ant:1.8.4',                             // required for AntBuilder
            'commons-cli:commons-cli:1.2',                          // required for CliBuilder
            "org.gradle:gradle-tooling-api:${gradleVersion}",
            "io.github.kdabir.directree:directree:${directreeVersion}"

    runtime 'org.slf4j:slf4j-simple:1.7.10'

    testCompile "junit:junit:${junitVersion}"
}

mainClassName = "glide.runner.Main"
description = "Command line interface for running glide applications"

/**
 * run provides a shortcut to run the app  without needing to install glide
 *
 * gradle run -Pcli="...."
 *
 * run the default sample app if no app is provided
 */
run {
    args(org.apache.tools.ant.types.Commandline.translateCommandline(project.findProperty("cli") ?: "--app ../sandbox"))
}

installDist {
    def install_location = getPathFromProperty("dir", rootProject.projectDir.path + "/glide-snapshot")
    into install_location

    doLast {
        println """Local Installation Complete

        ==================================================================
        Important: To use the installed glide, do one of the following
        - Add the following path to your PATH environment variable
            '$install_location/bin'

        - create alias to or run glide using the full path of executable
            '$install_location/bin/glide'
        ===================================================================
        """
    }
}

distZip {
    baseName = "glide"
}

startScripts {
    applicationName = "glide"       // this will be the name of script that is generated
}

processResources {
    def map = [
        builtAt: new Date().dateTimeString,
        runnerVersion: project.version
    ]

    inputs.properties map
    filter org.apache.tools.ant.filters.ReplaceTokens, tokens: map
}

publishing {
    publications {
        glideRunner(MavenPublication) {
            from components.java
            artifact distZip
        }
    }
}

release {
    tagTemplate = '$name-$version'
}


bintray {
    user = project.properties.get "bintrayUser"
    key = project.properties.get "bintrayKey"
    publications = ['glideRunner']

    def projectName = project.name
    def projectDescription = project.description

    pkg {
        repo = 'glide'
        name = projectName      // somehow project.* doesn't work in this closure
        desc = projectDescription
        licenses = ['MIT']
        vcsUrl = 'https://github.com/kdabir/glide.git'
    }
//    dryRun = true // whether to run this as dry-run, without deploying
}

sdkman {
    api = "https://vendors.sdkman.io/"
    consumerKey = project.properties.get "sdkmanConsumerKey"
    consumerToken = project.properties.get "sdkmanConsumerToken"
    candidate = "glide"
    version = project.version
    url = "https://dl.bintray.com/kdabir/glide/io/github/kdabir/glide/glide-runner/${project.version}/${project.name}-${project.version}.zip"
    hashtag = "#GlideAppEngine"
}

/**
 * extracts path from system properties and if no path given, uses default value
 *
 * use absolute path or path relative to current working dir
 *
 * WARNING: gradle installTo -Pdir=~/.glide may or may not work.
 *
 * @returns a file object
 */
def getPathFromProperty(prop_name, default_value){
    if (project.hasProperty(prop_name) ) {
        String dir = project.property(prop_name)

        String user_home = System.getProperty("user.home");
        if (dir.startsWith("~") && file(user_home).isDirectory())
            dir = dir.replaceFirst("~",user_home)

        return file(dir)
    }
    return file(default_value)
}


afterReleaseBuild.dependsOn bintrayUpload, sdkMajorRelease
